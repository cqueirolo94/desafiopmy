// Code generated by mockery v2.43.2. DO NOT EDIT.

package testdata

import (
	repository "orderprocessor/internal/order/infrastructure/repository"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// GetMatchedOrderAmount provides a mock function with given fields:
func (_m *OrderRepository) GetMatchedOrderAmount() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMatchedOrderAmount")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetUnmatcheOrderPrices provides a mock function with given fields:
func (_m *OrderRepository) GetUnmatcheOrderPrices() (uint32, uint32, uint32, uint32) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUnmatcheOrderPrices")
	}

	var r0 uint32
	var r1 uint32
	var r2 uint32
	var r3 uint32
	if rf, ok := ret.Get(0).(func() (uint32, uint32, uint32, uint32)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func() uint32); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func() uint32); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(uint32)
	}

	if rf, ok := ret.Get(3).(func() uint32); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(uint32)
	}

	return r0, r1, r2, r3
}

// MatchBuy provides a mock function with given fields: _a0
func (_m *OrderRepository) MatchBuy(_a0 *repository.OrderDTO) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MatchBuy")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*repository.OrderDTO) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*repository.OrderDTO) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*repository.OrderDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchSell provides a mock function with given fields: _a0
func (_m *OrderRepository) MatchSell(_a0 *repository.OrderDTO) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MatchSell")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*repository.OrderDTO) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*repository.OrderDTO) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*repository.OrderDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistBuy provides a mock function with given fields: _a0
func (_m *OrderRepository) PersistBuy(_a0 *repository.OrderDTO) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PersistBuy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.OrderDTO) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistSell provides a mock function with given fields: _a0
func (_m *OrderRepository) PersistSell(_a0 *repository.OrderDTO) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PersistSell")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.OrderDTO) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
